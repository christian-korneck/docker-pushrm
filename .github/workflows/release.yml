name: Release
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  pre:
   name: pre
   runs-on: ubuntu-latest
   steps:
     - name: pre1
       run: |
         env
         exit 0
       
  cr_release:
    name: create_release
    needs: [pre] #don't create a release too early
    runs-on: ubuntu-latest
    steps:
    - name: Check out code for changelog creation
      uses: actions/checkout@v2
      with:
        fetch-depth: 0 #otherwise only one commit is fetched
    - name: Create Changelog
      id: create_changelog
      run: |
        git fetch --tags
        git tag #for debug
        git log --oneline #for debug
        previousTag=$(git tag --sort=-v:refname | head -2 | tail -1)
        echo previous tag: $previousTag #for debug
        changelog=$(git log --oneline --pretty="%s" $previousTag..HEAD)
        echo changelog1: "$changelog" #for debug
        changelog=$(echo "$changelog" | sed 's/^/- /')
        echo changelog2: "$changelog" #for debug
        echo changes since $previousTag: > ./changelog.md
        echo "$changelog" >> ./changelog.md
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # token provided by Actions, no need to set it
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true #we'll undraft at the end if the build step was successfull (= all assets uploaded to the release)
        prerelease: false
        body_path: ./changelog.md
    - name: Output Release URL File
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v1
      with:
        name: release_url
        path: ./release_url.txt
    - name: Output Release ID File
      run: echo "${{ steps.create_release.outputs.id }}" > release_id.txt
    - name: Save Release ID File for publish
      uses: actions/upload-artifact@v1
      with:
        name: release_id
        path: ./release_id.txt
        
  build:
    needs: [pre, cr_release]
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, 386, arm64, arm]
        exclude:
          - os: windows
            arch: arm64
          - os: windows
            arch: arm
          - os: darwin
            arch: arm
          - os: darwin
            arch: arm64
          - os: darwin
            arch: 386
        include:
          - os: windows
            file_extension: '.exe'
          - os: linux
            file_extension: ''
          - os: darwin
            file_extension: ''
    name: Build
    runs-on: ubuntu-latest
    env: 
      GOOS: ${{ matrix.os }}
      GOARCH: ${{ matrix.arch }}
    steps:

    - name: Set up Go 1.15
      uses: actions/setup-go@v2
      with:
        go-version: 1.15
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 0
      run: |
        go get -v -t -d .

    - name: Build
      run: go build -v -a -tags netgo -ldflags='-s -w -extldflags "-static"' .

    - name: compress with upx
      run: sudo apt-get -y update && sudo apt-get -y install upx && upx ./docker-pushrm${{ matrix.file_extension }}

    - name: Upload artifact
      uses: actions/upload-artifact@v1
      with:
        name: docker-pushrm_${{ matrix.os }}_${{ matrix.arch }}${{ matrix.file_extension }}
        path: ./docker-pushrm${{ matrix.file_extension }}

    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
          name: release_url
    - name: Get Release File Name & Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }} # references get_release_info step above
        asset_name: docker-pushrm_${{ matrix.os }}_${{ matrix.arch }}${{ matrix.file_extension }}
        asset_path: ./docker-pushrm${{ matrix.file_extension }}
        asset_content_type: application/octet-stream
  
  build_containers:
    #needs: [build]
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    - name: Split tag string into semantic version parts
      id: semver
      run: |
        git fetch --tags
        git tag #for debug
        export vcur=$(git tag --sort=-v:refname | head -1 | sed 's/v//1')
        export vmajor=$(echo $vcur | cut -d. -f1)
        export vminor=$(echo $vcur | cut -d. -f2)
        export vpatch=$(echo $vcur | cut -d. -f3)
        echo ::set-output name=vcur::$vcur
        echo ::set-output name=vmajor::$vmajor
        echo ::set-output name=vminor::$vminor
        echo ::set-output name=vpatch::$vpatch
        echo version: $vcur
        echo version major: $vmajor
        echo version minor: $vminor
        echo version patch: $vpatch
    - name: Prepare docker-buildx
      run: |
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        docker buildx create --name mybuilder
        docker buildx ls #for debug
        docker buildx inspect --bootstrap
        docker buildx use mybuilder
    - name: Docker login
      env:
        DOCKER_USER: chko
        DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
      run: |
        docker login -u "$DOCKER_USER" -p  "$DOCKER_PASS"
    - name: Build and Push container images with docker-buildx
      env:
        vcur: ${{ steps.semver.outputs.vcur }}
        vmajor: ${{ steps.semver.outputs.vmajor }}
        vminor: ${{ steps.semver.outputs.vminor }}
        vpatch: ${{ steps.semver.outputs.vpatch }}
      run: |
        docker buildx inspect #for debug
        echo version: $ver - major: $vmajor - minor: $vminor - patch: $vpatch #for debug
        destrepo=chko/docker-pushrm
        docker buildx build -t "$destrepo:latest" -t "$destrepo:$vcur" -t "$destrepo:$vmajor" --platform linux/amd64,linux/386,linux/arm64,linux/arm/v7,linux/arm/v6 --push .
        docker buildx stop
    - name: Update container repo README
      env:
        #exact env var names for docker-pushrm
        DOCKER_USER: chko
        DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
      run: |
        # download latest docker-pushrm release from github
        # (because we keep the release that this workflow creates drafted until the end of the workflow run the version we're downloading is NOT the one we're currently releasing)
        export FILENAME=docker-pushrm_linux_amd64 && export DESTDIR=. && DOWNLOAD_URL=$(curl --silent --fail --show-error https://api.github.com/repos/christian-korneck/docker-pushrm/releases/latest | jq -r ".assets | map(select(.name == \"$FILENAME\"))[0].browser_download_url") && curl --silent --fail --show-error -L $DOWNLOAD_URL -o "$DESTDIR/docker-pushrm" && chmod +rx "$DESTDIR/docker-pushrm"
        # this automatically uses README-containers.md
        ./docker-pushrm --short "Docker Push Readme - Update the docs of your container repo on Dockerhub, Quay, Harbor from a file" chko/docker-pushrm

  undraft_release:
    needs: [build, build_containers] #only undraft the release if assets were uploaded to it
    runs-on: ubuntu-latest
    steps:
    - name: Load Release ID File from release job
      uses: actions/download-artifact@v1
      with:
          name: release_id
    - name: Get Release ID
      id: get_release_id_info
      run: |
        value=`cat release_id/release_id.txt`
        echo ::set-output name=release_id::$value
    - name: Undraft release
      id: undraft_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RELEASE_ID: ${{ steps.get_release_id_info.outputs.release_id }} # references other step
      run: |
        curl --verbose --fail --show-error --location --request PATCH "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/$RELEASE_ID" --header "Authorization: token $GITHUB_TOKEN" --header 'Content-Type: application/json' --header 'Accept: application/vnd.github.everest-preview+json' --data-raw '{"draft": false}'
  
  
  cleanup:
    needs: [build] #currently this can start before build_containers is finished
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: call webhook to delete artifacts
      env:
        FOR_WEBHOOKS_SECRET: ${{ secrets.FOR_WEBHOOKS_SECRET }}
      run: |
        echo "::add-mask::$FOR_WEBHOOKS_SECRET"
        curl --verbose --fail --show-error --location --request POST "https://api.github.com/repos/$GITHUB_REPOSITORY/dispatches" --header "Authorization: token $FOR_WEBHOOKS_SECRET" --header 'Content-Type: application/json' --header 'Accept: application/vnd.github.everest-preview+json' --data-raw "{ \"event_type\": \"delete_all_artifacts\", \"client_payload\": {\"parent_runid\": \"$GITHUB_RUN_ID\", \"parent_repo\": \"$GITHUB_REPOSITORY\"} }"


      
      
